# Generated by Django 4.2.11 on 2024-05-03 16:55

import chatbot.models.agents
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import pgvector.django
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        pgvector.django.VectorExtension(),
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='255 characters or fewer.', max_length=255, verbose_name='Assistant name')),
                ('system_message', models.TextField(blank=True, default='You are a helpful assistant.', help_text='System message')),
                ('is_interrupt', models.BooleanField(default=False, help_text='If True, Interrupt before the specific node (e.g. "action" node) when the workflow is stopped with human intervention.', verbose_name='Interrupt flag in LangGraph workflow')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='assistants', to=settings.AUTH_USER_MODEL, verbose_name='Assistant owner')),
            ],
        ),
        migrations.CreateModel(
            name='BaseConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='255 characters or fewer.', max_length=255, verbose_name='Config name')),
                ('config', models.JSONField(blank=True, help_text='Required: JSON format', null=True, verbose_name='Config')),
            ],
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('baseconfig_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='chatbot.baseconfig')),
                ('agent_type', models.IntegerField(choices=[(1, 'Open AI'), (2, 'Azure'), (3, 'Anthropic (Claude 2)'), (4, 'Amazon Bedrock'), (5, 'Fireworks (Mixtral)'), (6, 'Ollama'), (7, 'GEMINI')], default=1, verbose_name='Agent type')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='agent_configs', to=settings.AUTH_USER_MODEL, verbose_name='Agent config owner')),
            ],
            bases=('chatbot.baseconfig',),
        ),
        migrations.CreateModel(
            name='Thread',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='255 characters or fewer.', max_length=255, verbose_name='Thread name')),
                ('assistant', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='threads', to='chatbot.assistant', verbose_name='Base assistant of thread')),
            ],
        ),
        migrations.CreateModel(
            name='LangGraphCheckpoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_time', models.DateTimeField(help_text='Required: ISO format', verbose_name='Current checkpoint time')),
                ('previous_time', models.DateTimeField(blank=True, help_text='Required: ISO format', null=True, verbose_name='Previous checkpoint time')),
                ('checkpoint', picklefield.fields.PickledObjectField(editable=False, help_text='Required: Pickle instance', verbose_name='Checkpoint')),
                ('thread', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoints', to='chatbot.thread', verbose_name='LangGraph checkpoint')),
            ],
        ),
        migrations.CreateModel(
            name='EmbeddingStore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('embedding', pgvector.django.VectorField(verbose_name='Embedding vector')),
                ('document', models.TextField(blank=True, null=True, verbose_name='Document')),
                ('assistant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='embedding_stores', to='chatbot.assistant', verbose_name='Owner')),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('baseconfig_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='chatbot.baseconfig')),
                ('tool_type', models.IntegerField(choices=[(1, 'Retriever'), (2, 'Action Server'), (3, 'Arxiv'), (4, 'Connery Action'), (5, 'Dall-E Tool'), (6, 'DuckDuckGo Search'), (7, 'SEC Filings (Kay AI)'), (8, 'Press Releases (Kay AI)'), (9, 'PubMed'), (10, 'Tavily Search'), (11, 'Tavily Answer'), (12, 'You Search'), (13, 'Wikipedia')], default=1, verbose_name='Tool type')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='tool_configs', to=settings.AUTH_USER_MODEL, verbose_name='Tool config owner')),
            ],
            bases=('chatbot.baseconfig',),
        ),
        migrations.CreateModel(
            name='Embedding',
            fields=[
                ('baseconfig_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='chatbot.baseconfig')),
                ('distance_strategy', models.IntegerField(choices=[(1, 'Euclidean'), (2, 'Cosine'), (3, 'Max inner product')], default=2, verbose_name='Distance strategy')),
                ('emb', models.IntegerField(choices=[(1, 'Open AI'), (2, 'Azure'), (4, 'Amazon Bedrock'), (5, 'Fireworks (Mixtral)'), (6, 'Ollama'), (7, 'GEMINI')], default=1, validators=[chatbot.models.agents.AgentType.get_embedding_validator], verbose_name='Embedding type')),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='embedding_configs', to=settings.AUTH_USER_MODEL, verbose_name='Embedding config owner')),
            ],
            bases=('chatbot.baseconfig',),
        ),
        migrations.AddField(
            model_name='assistant',
            name='agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatbot.agent', verbose_name='Agent used in RAG'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='embedding',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='chatbot.embedding', verbose_name='Embedding used in RAG'),
        ),
        migrations.AddField(
            model_name='assistant',
            name='tools',
            field=models.ManyToManyField(related_name='tools', to='chatbot.tool', verbose_name='Tools used in RAG'),
        ),
    ]
